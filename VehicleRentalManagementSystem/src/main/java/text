# Advanced Vehicle Rental Management System

## Assignment Objective
Design a comprehensive Vehicle Rental Management System that demonstrates **ALL** Object-Oriented Programming (OOP) Principles:
- Polymorphism
- Abstraction
- Composition

## Problem Domain: Vehicle Rental Management System
#### 1. Abstraction Principle
Create an abstract base class `Vehicle` with the following abstract methods:
- `calculateRentalCost(int days)`
- `isAvailableForRental()`
#### 3. Encapsulation
Each vehicle class must:
- Protect sensitive data from direct modification

#### 4. Polymorphism Implementation
Create interfaces and method overriding:
- `Rentable` interface with methods:
  - `rent(Customer customer, int days)`
  - `returnVehicle()`
- Demonstrate method overloading

### Detailed Class Requirements
#### Vehicle (Abstract Class)
public abstract class Vehicle {
    // Abstract methods for rental calculation
}
```

#### Vehicle Specific Classes
Each vehicle class must implement unique:
- Rental cost calculations
#### Customer Class
- Implement rental eligibility checks
#### RentalAgency Class
- Manage vehicle fleet
- Process rentals
- Generate reports
- Implement complex business logic ?
### Bonus Challenges
1. Implement a loyalty program using interfaces
2. Create custom exceptions for rental scenarios
3. Add a rating system for vehicles and customers



### Additional OOP Principles to Demonstrate
- Static factory methods
- Composition over inheritance
- Interface-based design


### Specific Implementation Guidelines

#### Inheritance Requirements
-  `hashCode()`
- Provide clean, intuitive public interfaces


### Testing Requirements
1. Unit test each class independently
2. Test all possible scenarios
3. Validate encapsulation
4. Check inheritance and polymorphic behavior
5. Verify abstraction implementations
### Evaluation Criteria
- Correct implementation of OOP principles
- Code quality and readability
- Comprehensive test coverage
- Innovative solution design
- Error handling and validation
### Submission Guidelines
1. Create a well-structured Maven/Gradle project
2. Use meaningful package structure
3. Include comprehensive unit tests
4. Write clean, documented code
5. Follow Java naming conventions

## Recommended Tools
- Maven/Gradle
- JUnit 5

/*
        // Example customer email and transaction
        String customerEmail = "customer1@example.com";
        RentalTransaction transaction = new RentalTransaction(
                "TX001", "VIN57283", customerEmail,
                "2024-12-01", "2024-12-10", 500.0 // Example total cost
        );

        // Calculate Loyalty Points
        Customer.CalculateLoyaltyPoints calcPoints = new Customer.CalculateLoyaltyPoints();
        calcPoints.displayPoints(customerEmail);

        // Apply Loyalty Discount
        Customer.ApplyLoyaltyDiscount applyDiscount = new Customer.ApplyLoyaltyDiscount();
        boolean discountApplied = applyDiscount.applyDiscount(customerEmail, transaction);

        if (discountApplied) {
            System.out.println("Final transaction cost: $" + transaction.getTotalCost());
        */

